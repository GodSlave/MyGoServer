// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpc.proto

/*
	Package rpcpb is a generated protocol buffer package.

	It is generated from these files:
		rpc.proto

	It has these top-level messages:
		RPCInfo
		ResultInfo
*/
package rpcpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RPCInfo struct {
	Cid       string `protobuf:"bytes,1,opt,name=Cid,proto3" json:"Cid,omitempty"`
	Fn        string `protobuf:"bytes,2,opt,name=Fn,proto3" json:"Fn,omitempty"`
	ReplyTo   string `protobuf:"bytes,3,opt,name=ReplyTo,proto3" json:"ReplyTo,omitempty"`
	Track     string `protobuf:"bytes,4,opt,name=track,proto3" json:"track,omitempty"`
	Expired   int64  `protobuf:"varint,5,opt,name=Expired,proto3" json:"Expired,omitempty"`
	Reply     bool   `protobuf:"varint,6,opt,name=Reply,proto3" json:"Reply,omitempty"`
	SessionId string `protobuf:"bytes,7,opt,name=SessionId,proto3" json:"SessionId,omitempty"`
	Args      []byte `protobuf:"bytes,8,opt,name=Args,proto3" json:"Args,omitempty"`
	ByteFn    int32  `protobuf:"varint,9,opt,name=ByteFn,proto3" json:"ByteFn,omitempty"`
}

func (m *RPCInfo) Reset()                    { *m = RPCInfo{} }
func (m *RPCInfo) String() string            { return proto.CompactTextString(m) }
func (*RPCInfo) ProtoMessage()               {}
func (*RPCInfo) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

func (m *RPCInfo) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *RPCInfo) GetFn() string {
	if m != nil {
		return m.Fn
	}
	return ""
}

func (m *RPCInfo) GetReplyTo() string {
	if m != nil {
		return m.ReplyTo
	}
	return ""
}

func (m *RPCInfo) GetTrack() string {
	if m != nil {
		return m.Track
	}
	return ""
}

func (m *RPCInfo) GetExpired() int64 {
	if m != nil {
		return m.Expired
	}
	return 0
}

func (m *RPCInfo) GetReply() bool {
	if m != nil {
		return m.Reply
	}
	return false
}

func (m *RPCInfo) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *RPCInfo) GetArgs() []byte {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *RPCInfo) GetByteFn() int32 {
	if m != nil {
		return m.ByteFn
	}
	return 0
}

type ResultInfo struct {
	Cid        string `protobuf:"bytes,1,opt,name=Cid,proto3" json:"Cid,omitempty"`
	Error      string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
	ErrorCode  int32  `protobuf:"varint,3,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	ResultType string `protobuf:"bytes,4,opt,name=ResultType,proto3" json:"ResultType,omitempty"`
	Result     []byte `protobuf:"bytes,5,opt,name=Result,proto3" json:"Result,omitempty"`
}
func NewResultInfo(Cid string, Error string, ErrorCode int32, ArgsType string, result []byte) *ResultInfo {
	resultInfo := &ResultInfo{
		Cid:        *proto.String(Cid),
		Error:      *proto.String(Error),
		ErrorCode:  *proto.Int32(ErrorCode),
		ResultType: *proto.String(ArgsType),
		Result:     result,
	}
	return resultInfo
}
func (m *ResultInfo) Reset()                    { *m = ResultInfo{} }
func (m *ResultInfo) String() string            { return proto.CompactTextString(m) }
func (*ResultInfo) ProtoMessage()               {}
func (*ResultInfo) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

func (m *ResultInfo) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *ResultInfo) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ResultInfo) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ResultInfo) GetResultType() string {
	if m != nil {
		return m.ResultType
	}
	return ""
}

func (m *ResultInfo) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*RPCInfo)(nil), "rpcpb.RPCInfo")
	proto.RegisterType((*ResultInfo)(nil), "rpcpb.ResultInfo")
}
func (m *RPCInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Cid)))
		i += copy(dAtA[i:], m.Cid)
	}
	if len(m.Fn) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Fn)))
		i += copy(dAtA[i:], m.Fn)
	}
	if len(m.ReplyTo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.ReplyTo)))
		i += copy(dAtA[i:], m.ReplyTo)
	}
	if len(m.Track) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Track)))
		i += copy(dAtA[i:], m.Track)
	}
	if m.Expired != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Expired))
	}
	if m.Reply {
		dAtA[i] = 0x30
		i++
		if m.Reply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.SessionId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.SessionId)))
		i += copy(dAtA[i:], m.SessionId)
	}
	if len(m.Args) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Args)))
		i += copy(dAtA[i:], m.Args)
	}
	if m.ByteFn != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.ByteFn))
	}
	return i, nil
}

func (m *ResultInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Cid)))
		i += copy(dAtA[i:], m.Cid)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.ErrorCode))
	}
	if len(m.ResultType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.ResultType)))
		i += copy(dAtA[i:], m.ResultType)
	}
	if len(m.Result) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	return i, nil
}

func encodeFixed64Rpc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Rpc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RPCInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Fn)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.ReplyTo)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Track)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Expired != 0 {
		n += 1 + sovRpc(uint64(m.Expired))
	}
	if m.Reply {
		n += 2
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.ByteFn != 0 {
		n += 1 + sovRpc(uint64(m.ByteFn))
	}
	return n
}

func (m *ResultInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovRpc(uint64(m.ErrorCode))
	}
	l = len(m.ResultType)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func sovRpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RPCInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Track", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Track = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			m.Expired = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expired |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reply = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args[:0], dAtA[iNdEx:postIndex]...)
			if m.Args == nil {
				m.Args = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteFn", wireType)
			}
			m.ByteFn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteFn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x41, 0x4a, 0xc3, 0x40,
	0x14, 0x86, 0x7d, 0x49, 0x27, 0x69, 0x1e, 0x45, 0xca, 0x50, 0x64, 0x16, 0x12, 0x42, 0x57, 0x59,
	0xb9, 0xf1, 0x04, 0x36, 0x34, 0xd0, 0x9d, 0x8c, 0xbd, 0x80, 0x4d, 0x46, 0x09, 0x96, 0xcc, 0x30,
	0x89, 0x60, 0xae, 0xe0, 0x09, 0x3c, 0x92, 0x4b, 0x37, 0xee, 0x25, 0x5e, 0x44, 0xe6, 0x25, 0xa1,
	0x6e, 0xba, 0xfb, 0xbf, 0x8f, 0x37, 0x8f, 0xf7, 0x33, 0x18, 0x59, 0x53, 0xdc, 0x18, 0xab, 0x5b,
	0xcd, 0x99, 0x35, 0x85, 0x39, 0xac, 0xbf, 0x01, 0x43, 0x79, 0x9f, 0xed, 0xea, 0x27, 0xcd, 0x97,
	0xe8, 0x67, 0x55, 0x29, 0x20, 0x81, 0x34, 0x92, 0x2e, 0xf2, 0x4b, 0xf4, 0xf2, 0x5a, 0x78, 0x24,
	0xbc, 0xbc, 0xe6, 0x02, 0x43, 0xa9, 0xcc, 0xb1, 0xdb, 0x6b, 0xe1, 0x93, 0x9c, 0x90, 0xaf, 0x90,
	0xb5, 0xf6, 0xb1, 0x78, 0x11, 0x33, 0xf2, 0x03, 0xb8, 0xf9, 0xed, 0x9b, 0xa9, 0xac, 0x2a, 0x05,
	0x4b, 0x20, 0xf5, 0xe5, 0x84, 0x6e, 0x9e, 0x9e, 0x8a, 0x20, 0x81, 0x74, 0x2e, 0x07, 0xe0, 0xd7,
	0x18, 0x3d, 0xa8, 0xa6, 0xa9, 0x74, 0xbd, 0x2b, 0x45, 0x48, 0x9b, 0x4e, 0x82, 0x73, 0x9c, 0xdd,
	0xd9, 0xe7, 0x46, 0xcc, 0x13, 0x48, 0x17, 0x92, 0x32, 0xbf, 0xc2, 0x60, 0xd3, 0xb5, 0x2a, 0xaf,
	0x45, 0x94, 0x40, 0xca, 0xe4, 0x48, 0xeb, 0x77, 0x40, 0x94, 0xaa, 0x79, 0x3d, 0xb6, 0x67, 0xaa,
	0xad, 0x90, 0x6d, 0xad, 0xd5, 0x76, 0x6c, 0x37, 0x80, 0x3b, 0x80, 0x42, 0xa6, 0x4b, 0x45, 0x15,
	0x99, 0x3c, 0x09, 0x1e, 0x4f, 0x3b, 0xf7, 0x9d, 0x51, 0x63, 0xd3, 0x7f, 0xc6, 0x1d, 0x33, 0x10,
	0xb5, 0x5d, 0xc8, 0x91, 0x36, 0xcb, 0xcf, 0x3e, 0x86, 0xaf, 0x3e, 0x86, 0x9f, 0x3e, 0x86, 0x8f,
	0xdf, 0xf8, 0xe2, 0x10, 0xd0, 0x27, 0xdc, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x41, 0x6d,
	0xba, 0x91, 0x01, 0x00, 0x00,
}
