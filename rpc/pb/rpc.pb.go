// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpcpb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	RPCInfo
	ResultInfo
*/
package rpcpb

import "github.com/golang/protobuf/proto"
import "fmt"
import "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RPCInfo struct {
	Cid      string   `protobuf:"bytes,1,opt,name=Cid" json:"Cid,omitempty"`
	Fn       string   `protobuf:"bytes,2,opt,name=Fn" json:"Fn,omitempty"`
	ReplyTo  string   `protobuf:"bytes,3,opt,name=ReplyTo" json:"ReplyTo,omitempty"`
	Track    string   `protobuf:"bytes,4,opt,name=track" json:"track,omitempty"`
	Expired  int64    `protobuf:"varint,5,opt,name=Expired" json:"Expired,omitempty"`
	Reply    bool     `protobuf:"varint,6,opt,name=Reply" json:"Reply,omitempty"`
	ArgsType []string `protobuf:"bytes,7,rep,name=ArgsType" json:"ArgsType,omitempty"`
	Args     [][]byte `protobuf:"bytes,8,rep,name=Args,proto3" json:"Args,omitempty"`
}

func (m *RPCInfo) Reset()                    { *m = RPCInfo{} }
func (m *RPCInfo) String() string            { return proto.CompactTextString(m) }
func (*RPCInfo) ProtoMessage()               {}
func (*RPCInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RPCInfo) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *RPCInfo) GetFn() string {
	if m != nil {
		return m.Fn
	}
	return ""
}

func (m *RPCInfo) GetReplyTo() string {
	if m != nil {
		return m.ReplyTo
	}
	return ""
}

func (m *RPCInfo) GetTrack() string {
	if m != nil {
		return m.Track
	}
	return ""
}

func (m *RPCInfo) GetExpired() int64 {
	if m != nil {
		return m.Expired
	}
	return 0
}

func (m *RPCInfo) GetReply() bool {
	if m != nil {
		return m.Reply
	}
	return false
}

func (m *RPCInfo) GetArgsType() []string {
	if m != nil {
		return m.ArgsType
	}
	return nil
}

func (m *RPCInfo) GetArgs() [][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

type ResultInfo struct {
	Cid        string `protobuf:"bytes,1,opt,name=Cid" json:"Cid,omitempty"`
	Error      string `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
	ErrorCode  int32  `protobuf:"varint,3,opt,name=ErrorCode" json:"ErrorCode,omitempty"`
	ResultType string `protobuf:"bytes,4,opt,name=ResultType" json:"ResultType,omitempty"`
	Result     []byte `protobuf:"bytes,5,opt,name=Result,proto3" json:"Result,omitempty"`
}

func NewResultInfo(Cid string, Error string, ErrorCode int32, ArgsType string, result []byte) *ResultInfo {
	resultInfo := &ResultInfo{
		Cid:        *proto.String(Cid),
		Error:      *proto.String(Error),
		ErrorCode:  *proto.Int32(ErrorCode),
		ResultType: *proto.String(ArgsType),
		Result:     result,
	}
	return resultInfo
}

func (m *ResultInfo) Reset()                    { *m = ResultInfo{} }
func (m *ResultInfo) String() string            { return proto.CompactTextString(m) }
func (*ResultInfo) ProtoMessage()               {}
func (*ResultInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResultInfo) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *ResultInfo) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ResultInfo) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ResultInfo) GetResultType() string {
	if m != nil {
		return m.ResultType
	}
	return ""
}

func (m *ResultInfo) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*RPCInfo)(nil), "rpcpb.RPCInfo")
	proto.RegisterType((*ResultInfo)(nil), "rpcpb.ResultInfo")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x85, 0x49, 0xd3, 0xcc, 0xcf, 0xa5, 0x88, 0x5c, 0x8a, 0x04, 0x11, 0x09, 0x5d, 0x65, 0xe5,
	0xc6, 0x27, 0x90, 0xa1, 0x05, 0x77, 0x72, 0xe9, 0x0b, 0xd8, 0x99, 0x28, 0xc5, 0x32, 0x09, 0xb7,
	0x23, 0xd8, 0x57, 0xf0, 0x95, 0x7c, 0x39, 0x99, 0x9b, 0x8e, 0xba, 0x71, 0x77, 0xbe, 0xc3, 0x49,
	0xc8, 0x17, 0xa8, 0x39, 0xb5, 0x77, 0x89, 0xe3, 0x10, 0xd1, 0x70, 0x6a, 0xd3, 0x6e, 0xf5, 0xa5,
	0xa0, 0xa4, 0xa7, 0xe6, 0xb1, 0x7f, 0x89, 0x78, 0x09, 0xba, 0xd9, 0x77, 0x56, 0x39, 0xe5, 0x6b,
	0x1a, 0x23, 0x5e, 0xc0, 0x6c, 0xd3, 0xdb, 0x99, 0x14, 0xb3, 0x4d, 0x8f, 0x16, 0x4a, 0x0a, 0xe9,
	0x70, 0xda, 0x46, 0xab, 0xa5, 0x9c, 0x10, 0x97, 0x60, 0x06, 0x7e, 0x6e, 0xdf, 0xec, 0x5c, 0xfa,
	0x0c, 0xe3, 0x7e, 0xfd, 0x91, 0xf6, 0x1c, 0x3a, 0x6b, 0x9c, 0xf2, 0x9a, 0x26, 0x1c, 0xf7, 0x72,
	0xd4, 0x16, 0x4e, 0xf9, 0x8a, 0x32, 0xe0, 0x35, 0x54, 0x0f, 0xfc, 0x7a, 0xdc, 0x9e, 0x52, 0xb0,
	0xa5, 0xd3, 0xbe, 0xa6, 0x1f, 0x46, 0x84, 0xf9, 0x98, 0x6d, 0xe5, 0xb4, 0x5f, 0x90, 0xe4, 0xd5,
	0xa7, 0x02, 0xa0, 0x70, 0x7c, 0x3f, 0x0c, 0xff, 0x08, 0x2c, 0xc1, 0xac, 0x99, 0x23, 0x9f, 0x1d,
	0x32, 0xe0, 0x0d, 0xd4, 0x12, 0x9a, 0xd8, 0x05, 0x11, 0x31, 0xf4, 0x5b, 0xe0, 0xed, 0x74, 0xa7,
	0x3c, 0x23, 0xfb, 0xfc, 0x69, 0xf0, 0x0a, 0x8a, 0x4c, 0xe2, 0xb4, 0xa0, 0x33, 0xed, 0x0a, 0xf9,
	0xd8, 0xfb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x5c, 0x10, 0x09, 0x65, 0x01, 0x00, 0x00,
}
